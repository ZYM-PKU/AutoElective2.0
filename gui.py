#本文件定义可视化界面与交互行为

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\Code\python\AutoElective\qt\login.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
import shelve
from PyQt5.uic import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from options import *

from PyQt5.QtCore import pyqtSignal, QObject

from AutoElec import *
from threading import Thread

PATH = os.path.dirname(__file__)


# 全局变量声明：
#######info#######
targets = []  # 选课目标
user_id = ""  # 学号
user_password = ""  # 密码
user_driver = ""  # 浏览器驱动地址
#######choices######
sound_reminder = SR.NONE  # 声音提醒
email_reminder = False  # 邮件提醒
login_method = LM.PORTAL  # 登录方式
refresh_frequency = 2  # 刷新频率
icr_permitted = False  # 启用验证码识别\
icr_method = IM.CNN


class MySignal(QObject):
    print_text = pyqtSignal(str)
    error_message = pyqtSignal(ERROR)


class Loginwindow(QWidget):
    def __init__(self):
        super().__init__()
        loadUi(os.path.join(PATH, "qt/ui/login.ui"), self)  # 加载UI文件
        self.continued=False #是否继续加载主页面
        self.infoinit()  # 初始化用户信息
        self.startbutton.clicked.connect(self.submit)
        self.checkBox_4.stateChanged.connect(self.password_change)

    def infoinit(self):
        global targets
        try:
            with shelve.open(os.path.join(PATH, "qt/save/studentinfo")) as s:
                self.lineEdit.setText(s['id'])
                self.lineEdit_2.setText(s['password'])
                self.lineEdit_3.setText(s['driver'])
                targets = s['targets']
                for i, target in enumerate(targets):
                    item = QTableWidgetItem()
                    item.setText(target)
                    self.etable.setItem(i, 0, item)
            if self.lineEdit.text() and self.lineEdit_2.text() and self.lineEdit_3.text():
                self.checkBox.setChecked(True)
        except:
            return
    def closeEvent(self, event):
        """重写窗口关闭相应方法，保证主窗口被人为关闭时自动停止所有线程，结束主进程"""
        if not self.continued: sys.exit(0)


    def submit(self):
        # 获取选课信息
        global targets
        targets.clear()
        for i in range(6):
            try:
                target = self.etable.item(i, 0).text()
                if target:
                    targets.append(target)
            except:
                continue
        #获取用户信息
        global user_id,user_password,user_driver
        user_id =self.lineEdit.text()
        user_password =self.lineEdit_2.text()
        user_driver =self.lineEdit_3.text()

        # 表单验证
        if len(user_id) != 10:
            if not user_id:
                QMessageBox.warning(self, '警告', '请填写学号！')
            else:
                QMessageBox.critical(self, '错误', '学号填写有误！')
            return
        elif not user_password:
            QMessageBox.warning(self, '警告', '请填写密码！')
            return
        elif not user_driver:
            QMessageBox.warning(self, '警告', '请填写浏览器驱动路径！')
            return

        if not targets:
            QMessageBox.warning(self, '警告', '请设置至少一个选课目标！')
            return




        # 获取设置
        global sound_reminder
        if self.comboBox.currentText() == '不提醒':
            sound_reminder = SR.NONE
        elif self.comboBox.currentText() == '任何时候':
            sound_reminder = SR.ANYTIME
        elif '合适的时候' in self.comboBox.currentText():
            sound_reminder = SR.APPROPRIATE

        global login_method
        try:
            if self.buttonGroup.checkedButton().text() == '选课网':
                login_method = LM.ELECTIVE
            elif self.buttonGroup.checkedButton().text() == '门户':
                login_method = LM.PORTAL
        except:
            login_method = LM.PORTAL

        global email_reminder, icr_permitted
        if self.checkBox_2.isChecked():
            email_reminder = True
        else:
            email_reminder = False
        if self.checkBox_3.isChecked():
            icr_permitted = True
        else:
            icr_permitted = False

        global refresh_frequency
        refresh_frequency = self.spinBox.value()


        


        # 保存信息
        if self.checkBox.isChecked():
            self.saveinfo()
        else:
            with shelve.open(os.path.join(PATH, "qt/save/studentinfo")) as s:
                s['id'] = s['password'] = ""
                s['targets'] = []

        # 窗口跳转
        self.mainwindow = Mainwindow()
        self.mainwindow.show()
        self.continued=True
        self.close()

    def password_change(self):
        if self.checkBox_4.isChecked():
            self.lineEdit_2.setEchoMode(QLineEdit.EchoMode(0))
        else:
            self.lineEdit_2.setEchoMode(QLineEdit.EchoMode(2))

    def saveinfo(self):
        with shelve.open(os.path.join(PATH, "qt/save/studentinfo")) as s:
            s['id'] = self.lineEdit.text()
            s['password'] = self.lineEdit_2.text()
            s['driver'] = self.lineEdit_3.text()
            s['targets'] = targets



class Mainwindow(QMainWindow):
    def __init__(self):
        super().__init__()
        loadUi(os.path.join(PATH, "qt/ui/mainwindow.ui"), self)  # 加载UI文件
        #初始化选课工具  
        self.ms = MySignal()#前后台信号传输
        self.ET = Electool(self,targets,user_id,user_password,user_driver,sound_reminder,email_reminder,login_method,refresh_frequency,icr_permitted,icr_method,self.ms)

        #初始化界面
        self.infoinit()
        self.comboBox.currentIndexChanged.connect(self.change_method)
        self.ms.print_text.connect(self.printinfo)
        self.ms.error_message.connect(self.error_handler)
        self.restartbutton.clicked.connect(self.restart)
        self.stopbutton.clicked.connect(self.stop)


        #新建界面进程，控制界面变化
        self.window_thread=Thread(target=self.window_refresh)
        self.window_thread.setDaemon(True)
        self.window_thread.start()
        self.ET.run()

    def closeEvent(self, event):
        """重写窗口关闭相应方法，保证主窗口被人为关闭时自动停止所有线程，结束主进程"""
        print('exit')
        try:
            self.ET.terminate_thread()
        except:
            pass
        try:
            stop_thread(self.ET.control_thread)
        except:
            pass

        sys.exit(0)



    def infoinit(self):
        global targets
        for i, target in enumerate(targets):
            item = QTableWidgetItem()
            item.setText(target)
            self.etable.setItem(i, 0, item)
        
        self.statelabel.setText("正在启动...")
        self.frequencylabel.setText(f"{refresh_frequency} s")
        self.ET.state=STATE.LOADING


    def window_refresh(self):
        while(1):
            #时间栏
            self.timelabel.setText(self.ET.gettime())

            #状态栏
            if self.ET.state==STATE.LOADING:self.statelabel.setText("加载中...")
            elif self.ET.state==STATE.INITIALIZING:self.statelabel.setText("初始化...")
            elif self.ET.state==STATE.CONNECTING:self.statelabel.setText("尝试连接...")
            elif self.ET.state==STATE.LOGINING:self.statelabel.setText("正在登录...")
            elif self.ET.state==STATE.JUMPING:self.statelabel.setText("正在跳转...")
            elif self.ET.state==STATE.REFRESHING:self.statelabel.setText("自动刷新监控中...")
            elif self.ET.state==STATE.SNATCHING:self.statelabel.setText("正在抓取名额...")
            elif self.ET.state==STATE.ERROR:self.statelabel.setText("系统异常")
            elif self.ET.state==STATE.RESTARTING:self.statelabel.setText("正在尝试重启...")
            elif self.ET.state==STATE.STOPPED:self.statelabel.setText("系统中断")

    def change_method(self):
        global icr_method
        if self.comboBox.currentText() == "cnn method":
            icr_method = IM.TESSERACT
            self.piclabel.setPixmap(
                QPixmap(os.path.join(PATH, "qt/pics/PyTorch-logo.jpg")))
        elif self.comboBox.currentText() == "tesseract-OCR":
            icr_method = IM.CNN
            self.piclabel.setPixmap(
                QPixmap(os.path.join(PATH, "qt/pics/ocr.jpg")))

    def printinfo(self, text):
        '''在文本输出框打印当前进程'''
        if self.ET.state not in (STATE.STOPPED,STATE.RESTARTING):
            self.infobox.append(text)
            self.infobox.ensureCursorVisible()

    def error_handler(self,e):
        '''错误处理'''
        self.ET.state=STATE.ERROR
        if e==ERROR.EMAIL_ERROR:
            self.infobox.append("邮箱信息有误,初始化失败，邮件提醒已自动关闭")

    def restart(self):
        self.ET.restart_thread()
        self.stopbutton.setEnabled(True)

    def stop(self):
        self.ET.terminate_thread()
        self.stopbutton.setEnabled(False)



if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    app.setWindowIcon(QIcon(os.path.join(PATH, "qt/pics/peking.png")))
    lw = Loginwindow()
    lw.show()
    sys.exit(app.exec_())
